{"ast":null,"code":"import moment from 'moment';\nconst alpha = v => /^[A-Za-z]+$/.test(v);\nexport const validateEmployee = data => {\n  const errors = [];\n  if (!data.firstname) errors.push({\n    field: 'firstname',\n    msg: 'Firstname is required'\n  });else if (!alpha(data.firstname)) errors.push({\n    field: 'firstname',\n    msg: 'Alphabetic only'\n  });\n  if (!data.lastname) errors.push({\n    field: 'lastname',\n    msg: 'Lastname is required'\n  });else if (!alpha(data.lastname)) errors.push({\n    field: 'lastname',\n    msg: 'Alphabetic only'\n  });\n  if (!data.dept) errors.push({\n    field: 'dept',\n    msg: 'Dept is required'\n  });else if (!alpha(data.dept)) errors.push({\n    field: 'dept',\n    msg: 'Alphabetic only'\n  });\n  if (!data.title) errors.push({\n    field: 'title',\n    msg: 'Title is required'\n  });else if (!['Mr', 'Miss', 'Mrs', 'Dr'].includes(data.title)) errors.push({\n    field: 'title',\n    msg: 'Invalid title'\n  });\n  if (!data.birthDate) errors.push({\n    field: 'birthDate',\n    msg: 'birthDate required'\n  });else {\n    const birth = moment(data.birthDate, 'YYYY-MM-DD', true);\n    if (!birth.isValid()) errors.push({\n      field: 'birthDate',\n      msg: 'Invalid date'\n    });else {\n      if (birth.isBefore(moment('1900-01-01'))) errors.push({\n        field: 'birthDate',\n        msg: 'Must be on or after 1900-01-01'\n      });\n      if (moment().diff(birth, 'years') < 18) errors.push({\n        field: 'birthDate',\n        msg: 'Employee must be at least 18'\n      });\n    }\n  }\n  if (data.salary == null) errors.push({\n    field: 'salary',\n    msg: 'salary required'\n  });else if (!(Number(data.salary) > 0)) errors.push({\n    field: 'salary',\n    msg: 'salary must be > 0'\n  });\n  if (!data.email) errors.push({\n    field: 'email',\n    msg: 'email required'\n  });else if (!/^\\S+@\\S+\\.\\S+$/.test(data.email)) errors.push({\n    field: 'email',\n    msg: 'Invalid email'\n  });\n  return errors;\n};","map":{"version":3,"names":["moment","alpha","v","test","validateEmployee","data","errors","firstname","push","field","msg","lastname","dept","title","includes","birthDate","birth","isValid","isBefore","diff","salary","Number","email"],"sources":["/home/amir/employee-crud/frontend/src/util/validators.js"],"sourcesContent":["import moment from 'moment';\n\nconst alpha = (v) => /^[A-Za-z]+$/.test(v);\n\nexport const validateEmployee = (data) => {\n  const errors = [];\n\n  if (!data.firstname) errors.push({ field: 'firstname', msg: 'Firstname is required' });\n  else if (!alpha(data.firstname)) errors.push({ field: 'firstname', msg: 'Alphabetic only' });\n\n  if (!data.lastname) errors.push({ field: 'lastname', msg: 'Lastname is required' });\n  else if (!alpha(data.lastname)) errors.push({ field: 'lastname', msg: 'Alphabetic only' });\n\n  if (!data.dept) errors.push({ field: 'dept', msg: 'Dept is required' });\n  else if (!alpha(data.dept)) errors.push({ field: 'dept', msg: 'Alphabetic only' });\n\n  if (!data.title) errors.push({ field: 'title', msg: 'Title is required' });\n  else if (!['Mr', 'Miss', 'Mrs', 'Dr'].includes(data.title))\n    errors.push({ field: 'title', msg: 'Invalid title' });\n\n  if (!data.birthDate) errors.push({ field: 'birthDate', msg: 'birthDate required' });\n  else {\n    const birth = moment(data.birthDate, 'YYYY-MM-DD', true);\n    if (!birth.isValid()) errors.push({ field: 'birthDate', msg: 'Invalid date' });\n    else {\n      if (birth.isBefore(moment('1900-01-01')))\n        errors.push({ field: 'birthDate', msg: 'Must be on or after 1900-01-01' });\n      if (moment().diff(birth, 'years') < 18)\n        errors.push({ field: 'birthDate', msg: 'Employee must be at least 18' });\n    }\n  }\n\n  if (data.salary == null) errors.push({ field: 'salary', msg: 'salary required' });\n  else if (!(Number(data.salary) > 0)) errors.push({ field: 'salary', msg: 'salary must be > 0' });\n\n  if (!data.email) errors.push({ field: 'email', msg: 'email required' });\n  else if (!/^\\S+@\\S+\\.\\S+$/.test(data.email))\n    errors.push({ field: 'email', msg: 'Invalid email' });\n\n  return errors;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}